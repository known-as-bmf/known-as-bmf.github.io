{"componentChunkName":"component---src-templates-blog-post-tsx","path":"/functional-programming/currying/part-1","result":{"data":{"site":{"siteMetadata":{"title":"known-as-bmf.github.io","author":"Julien Avert"}},"markdownRemark":{"id":"7e5461ee-503e-57e5-865d-914cd439a0d9","excerpt":"Deux autres concepts très importants dans le paradigme fonctionnel sont le currying et l’application partielle. Voici un problème très simple qui illustrera ces…","html":"<p>Deux autres concepts très importants dans le paradigme fonctionnel sont le <strong>currying</strong> et l’<strong>application partielle</strong>.</p>\n<p>Voici un problème très simple qui illustrera ces concepts : nous avons une liste d’entiers.</p>\n<pre class=\"default-dark vscode-highlight\" data-language=\"js\"><code class=\"vscode-highlight-code\"><span class=\"vscode-highlight-line\"><span class=\"mtk4\">const</span><span class=\"mtk1\"> </span><span class=\"mtk12\">arr</span><span class=\"mtk1\"> = [</span><span class=\"mtk7\">1</span><span class=\"mtk1\">, </span><span class=\"mtk7\">2</span><span class=\"mtk1\">, </span><span class=\"mtk7\">3</span><span class=\"mtk1\">, </span><span class=\"mtk7\">2</span><span class=\"mtk1\">, </span><span class=\"mtk7\">4</span><span class=\"mtk1\">, </span><span class=\"mtk7\">6</span><span class=\"mtk1\">, </span><span class=\"mtk7\">5</span><span class=\"mtk1\">, </span><span class=\"mtk7\">8</span><span class=\"mtk1\">];</span></span></code></pre>\n<p>dont nous souhaitons multiplier tous les éléments par <code>10</code>. Créons une fonction pour simplifier le travail.</p>\n<pre class=\"default-dark vscode-highlight\" data-language=\"js\"><code class=\"vscode-highlight-code\"><span class=\"vscode-highlight-line\"><span class=\"mtk3\">// (Number, Number) -&gt; Number</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk4\">const</span><span class=\"mtk1\"> </span><span class=\"mtk11\">mult</span><span class=\"mtk1\"> = (</span><span class=\"mtk12\">a</span><span class=\"mtk1\">, </span><span class=\"mtk12\">b</span><span class=\"mtk1\">) </span><span class=\"mtk4\">=&gt;</span><span class=\"mtk1\"> </span><span class=\"mtk12\">a</span><span class=\"mtk1\"> * </span><span class=\"mtk12\">b</span><span class=\"mtk1\">;</span></span></code></pre>\n<p>Pour effectuer la transformation, utilisons la fonction <code>map</code> vue dans la partie sur les fonctions d’ordre supérieur.</p>\n<pre class=\"default-dark vscode-highlight\" data-language=\"js\"><code class=\"vscode-highlight-code\"><span class=\"vscode-highlight-line\"><span class=\"mtk4\">const</span><span class=\"mtk1\"> </span><span class=\"mtk12\">result</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">arr</span><span class=\"mtk1\">.</span><span class=\"mtk11\">map</span><span class=\"mtk1\">(</span><span class=\"mtk12\">i</span><span class=\"mtk1\"> </span><span class=\"mtk4\">=&gt;</span><span class=\"mtk1\"> </span><span class=\"mtk11\">mult</span><span class=\"mtk1\">(</span><span class=\"mtk7\">10</span><span class=\"mtk1\">, </span><span class=\"mtk12\">i</span><span class=\"mtk1\">));</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk3\">// result = [10, 20, 30, 20, 40, 60, 50, 80]</span></span></code></pre>\n<p>On peut rendre le code plus expressif en créant une fonction qui multiplie par <code>10</code>.</p>\n<pre class=\"default-dark vscode-highlight\" data-language=\"js\"><code class=\"vscode-highlight-code\"><span class=\"vscode-highlight-line\"><span class=\"mtk3\">// Number -&gt; Number</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk4\">const</span><span class=\"mtk1\"> </span><span class=\"mtk11\">tenTimes</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">b</span><span class=\"mtk1\"> </span><span class=\"mtk4\">=&gt;</span><span class=\"mtk1\"> </span><span class=\"mtk11\">mult</span><span class=\"mtk1\">(</span><span class=\"mtk7\">10</span><span class=\"mtk1\">, </span><span class=\"mtk12\">b</span><span class=\"mtk1\">);</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\"></span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk4\">const</span><span class=\"mtk1\"> </span><span class=\"mtk12\">result</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">arr</span><span class=\"mtk1\">.</span><span class=\"mtk11\">map</span><span class=\"mtk1\">(</span><span class=\"mtk12\">tenTimes</span><span class=\"mtk1\">);</span></span></code></pre>\n<p>Malheureusement, s’il faut enchainer plusieurs traitements, le code nécessaire croit assez rapidement.</p>\n<pre class=\"default-dark vscode-highlight\" data-language=\"js\"><code class=\"vscode-highlight-code\"><span class=\"vscode-highlight-line\"><span class=\"mtk3\">// (Number, Number) -&gt; Number</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk4\">const</span><span class=\"mtk1\"> </span><span class=\"mtk11\">add</span><span class=\"mtk1\"> = (</span><span class=\"mtk12\">a</span><span class=\"mtk1\">, </span><span class=\"mtk12\">b</span><span class=\"mtk1\">) </span><span class=\"mtk4\">=&gt;</span><span class=\"mtk1\"> </span><span class=\"mtk12\">a</span><span class=\"mtk1\"> + </span><span class=\"mtk12\">b</span><span class=\"mtk1\">;</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\"></span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk3\">// Number -&gt; Number</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk4\">const</span><span class=\"mtk1\"> </span><span class=\"mtk11\">plusTen</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">b</span><span class=\"mtk1\"> </span><span class=\"mtk4\">=&gt;</span><span class=\"mtk1\"> </span><span class=\"mtk11\">add</span><span class=\"mtk1\">(</span><span class=\"mtk7\">10</span><span class=\"mtk1\">, </span><span class=\"mtk12\">b</span><span class=\"mtk1\">);</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk3\">// Number -&gt; Number</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk4\">const</span><span class=\"mtk1\"> </span><span class=\"mtk11\">plusFifty</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">b</span><span class=\"mtk1\"> </span><span class=\"mtk4\">=&gt;</span><span class=\"mtk1\"> </span><span class=\"mtk11\">add</span><span class=\"mtk1\">(</span><span class=\"mtk7\">50</span><span class=\"mtk1\">, </span><span class=\"mtk12\">b</span><span class=\"mtk1\">);</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk3\">// Number -&gt; Number</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk4\">const</span><span class=\"mtk1\"> </span><span class=\"mtk11\">twoTimes</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">b</span><span class=\"mtk1\"> </span><span class=\"mtk4\">=&gt;</span><span class=\"mtk1\"> </span><span class=\"mtk11\">mult</span><span class=\"mtk1\">(</span><span class=\"mtk7\">2</span><span class=\"mtk1\">, </span><span class=\"mtk12\">b</span><span class=\"mtk1\">);</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\"></span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk4\">const</span><span class=\"mtk1\"> </span><span class=\"mtk12\">result</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">arr</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">  .</span><span class=\"mtk11\">map</span><span class=\"mtk1\">(</span><span class=\"mtk12\">tenTimes</span><span class=\"mtk1\">)</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">  .</span><span class=\"mtk11\">map</span><span class=\"mtk1\">(</span><span class=\"mtk12\">plusFifty</span><span class=\"mtk1\">)</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">  .</span><span class=\"mtk11\">map</span><span class=\"mtk1\">(</span><span class=\"mtk12\">twoTimes</span><span class=\"mtk1\">)</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">  .</span><span class=\"mtk11\">map</span><span class=\"mtk1\">(</span><span class=\"mtk12\">plusTen</span><span class=\"mtk1\">);</span></span></code></pre>\n<p>Essayons de garder un code expressif et de réduire la quantité de code à écrire.</p>\n<style class=\"vscode-highlight-styles\">:root {\n  --vscode-highlight-padding-v: 1rem;\n  --vscode-highlight-padding-h: 1.5rem;\n  --vscode-highlight-padding-top: var(--vscode-highlight-padding-v);\n  --vscode-highlight-padding-right: var(--vscode-highlight-padding-h);\n  --vscode-highlight-padding-bottom: var(--vscode-highlight-padding-v);\n  --vscode-highlight-padding-left: var(--vscode-highlight-padding-h);\n  --vscode-highlight-border-radius: 8px;\n\n  --vscode-highlight-line-highlighted-background-color: transparent;\n  --vscode-highlight-line-highlighted-border-width: 4px;\n  --vscode-highlight-line-highlighted-border-color: transparent;\n}\n\n.vscode-highlight {\n  overflow: auto;\n  -webkit-overflow-scrolling: touch;\n  padding-top: 1rem;\n  padding-top: var(--vscode-highlight-padding-top);\n  padding-bottom: 1rem;\n  padding-bottom: var(--vscode-highlight-padding-bottom);\n  border-radius: 8px;\n  border-radius: var(--vscode-highlight-border-radius);\n  font-feature-settings: normal;\n}\n\n.vscode-highlight-code {\n  display: inline-block;\n  min-width: 100%;\n}\n\n.vscode-highlight-line {\n  display: inline-block;\n  box-sizing: border-box;\n  width: 100%;\n  padding-left: 1.5rem;\n  padding-left: var(--vscode-highlight-padding-left);\n  padding-right: 1.5rem;\n  padding-right: var(--vscode-highlight-padding-right);\n}\n\n.vscode-highlight-line-highlighted {\n  background-color: var(--vscode-highlight-line-highlighted-background-color);\n  box-shadow: inset var(--vscode-highlight-line-highlighted-border-width) 0 0 0 var(--vscode-highlight-line-highlighted-border-color);\n}\n.default-dark {\nbackground-color: #1E1E1E;\ncolor: #D4D4D4;\n}\n\n.default-dark .mtk1 { color: #D4D4D4; }\n.default-dark .mtk2 { color: #1E1E1E; }\n.default-dark .mtk3 { color: #6A9955; }\n.default-dark .mtk4 { color: #569CD6; }\n.default-dark .mtk5 { color: #D16969; }\n.default-dark .mtk6 { color: #D7BA7D; }\n.default-dark .mtk7 { color: #B5CEA8; }\n.default-dark .mtk8 { color: #CE9178; }\n.default-dark .mtk9 { color: #646695; }\n.default-dark .mtk10 { color: #4EC9B0; }\n.default-dark .mtk11 { color: #DCDCAA; }\n.default-dark .mtk12 { color: #9CDCFE; }\n.default-dark .mtk13 { color: #000080; }\n.default-dark .mtk14 { color: #F44747; }\n.default-dark .mtk15 { color: #C586C0; }\n.default-dark .mtk16 { color: #6796E6; }\n.default-dark .mtk17 { color: #808080; }\n.default-dark .mtki { font-style: italic; }\n.default-dark .mtkb { font-weight: bold; }\n.default-dark .mtku { text-decoration: underline; text-underline-position: under; }</style>","frontmatter":{"title":"Functional Programming — Currying (Part 1)","date":"October 22, 2019","description":""}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"next":{"fields":{"slug":"/functional-programming/currying/part-2"},"frontmatter":{"title":"Functional Programming — Currying (Part 2)"}},"previous":{"fields":{"slug":"/functional-programming/high-order-functions/part-5"},"frontmatter":{"title":"Functional Programming — High-Order Functions (Part 5)"}},"slug":"/functional-programming/currying/part-1"}}}