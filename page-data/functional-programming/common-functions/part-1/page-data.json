{"componentChunkName":"component---src-templates-blog-post-tsx","path":"/functional-programming/common-functions/part-1","result":{"data":{"site":{"siteMetadata":{"title":"known-as-bmf.github.io","author":"Julien Avert"}},"markdownRemark":{"id":"7c687b44-34ad-53db-9cba-217cef5bf2b6","excerpt":"Une des choses très intimidante quand on débute dans la programmation fonctionnelle, c’est le vocabulaire. Beaucoup de termes sembles étrangers et complexes…","html":"<p>Une des choses très intimidante quand on débute dans la programmation fonctionnelle, c’est le vocabulaire. Beaucoup de termes sembles étrangers et complexes. Essayons de les démystifier un peu.</p>\n<p>Voici une liste de fonctions classiques et une implémentation naïve. Certaines ont déjà une implémentation en JavaScript standard, mais il est très utile d’en créer une version fonctionnelle pour la suite.</p>\n<ul>\n<li><code>identity</code> une fonction qui prends un argument et le retourne tel quel. parfois appelé <code>id</code>.</li>\n</ul>\n<pre class=\"default-dark vscode-highlight\" data-language=\"js\"><code class=\"vscode-highlight-code\"><span class=\"vscode-highlight-line\"><span class=\"mtk3\">// a -&gt; a</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk4\">const</span><span class=\"mtk1\"> </span><span class=\"mtk11\">identity</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">x</span><span class=\"mtk1\"> </span><span class=\"mtk4\">=&gt;</span><span class=\"mtk1\"> </span><span class=\"mtk12\">x</span><span class=\"mtk1\">;</span></span></code></pre>\n<ul>\n<li><code>always</code> une fonction qui prends un argument et retourne une fonction qui retournera toujours cette valeur. Parfois appelé <code>constant</code>.</li>\n</ul>\n<pre class=\"default-dark vscode-highlight\" data-language=\"js\"><code class=\"vscode-highlight-code\"><span class=\"vscode-highlight-line\"><span class=\"mtk3\">// a -&gt; () -&gt; a</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk4\">const</span><span class=\"mtk1\"> </span><span class=\"mtk11\">always</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">x</span><span class=\"mtk1\"> </span><span class=\"mtk4\">=&gt;</span><span class=\"mtk1\"> () </span><span class=\"mtk4\">=&gt;</span><span class=\"mtk1\"> </span><span class=\"mtk12\">x</span><span class=\"mtk1\">;</span></span></code></pre>\n<ul>\n<li><code>map</code> applique une fonction de transformation a chaque élément d’une collection. Parfois appelé <code>select</code>.</li>\n</ul>\n<pre class=\"default-dark vscode-highlight\" data-language=\"js\"><code class=\"vscode-highlight-code\"><span class=\"vscode-highlight-line\"><span class=\"mtk3\">// (a -&gt; b) -&gt; a[] -&gt; b[]</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk4\">const</span><span class=\"mtk1\"> </span><span class=\"mtk11\">map</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">mapFn</span><span class=\"mtk1\"> </span><span class=\"mtk4\">=&gt;</span><span class=\"mtk1\"> </span><span class=\"mtk12\">list</span><span class=\"mtk1\"> </span><span class=\"mtk4\">=&gt;</span><span class=\"mtk1\"> </span><span class=\"mtk12\">list</span><span class=\"mtk1\">.</span><span class=\"mtk11\">map</span><span class=\"mtk1\">(</span><span class=\"mtk12\">mapFn</span><span class=\"mtk1\">);</span></span></code></pre>\n<ul>\n<li><code>filter</code> filtre une collection avec un prédicat. Parfois appelé <code>where</code>.</li>\n</ul>\n<pre class=\"default-dark vscode-highlight\" data-language=\"js\"><code class=\"vscode-highlight-code\"><span class=\"vscode-highlight-line\"><span class=\"mtk3\">// (a -&gt; Boolean) -&gt; a[] -&gt; a[]</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk4\">const</span><span class=\"mtk1\"> </span><span class=\"mtk11\">filter</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">filterFn</span><span class=\"mtk1\"> </span><span class=\"mtk4\">=&gt;</span><span class=\"mtk1\"> </span><span class=\"mtk12\">list</span><span class=\"mtk1\"> </span><span class=\"mtk4\">=&gt;</span><span class=\"mtk1\"> </span><span class=\"mtk12\">list</span><span class=\"mtk1\">.</span><span class=\"mtk11\">filter</span><span class=\"mtk1\">(</span><span class=\"mtk12\">filterFn</span><span class=\"mtk1\">);</span></span></code></pre>\n<ul>\n<li><code>find</code> trouve la première valeur dans collection qui satisfait un prédicat. Parfois appelé <code>first</code>.</li>\n</ul>\n<pre class=\"default-dark vscode-highlight\" data-language=\"js\"><code class=\"vscode-highlight-code\"><span class=\"vscode-highlight-line\"><span class=\"mtk3\">// (a -&gt; Boolean) -&gt; a[] -&gt; a</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk4\">const</span><span class=\"mtk1\"> </span><span class=\"mtk11\">find</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">findFn</span><span class=\"mtk1\"> </span><span class=\"mtk4\">=&gt;</span><span class=\"mtk1\"> </span><span class=\"mtk12\">list</span><span class=\"mtk1\"> </span><span class=\"mtk4\">=&gt;</span><span class=\"mtk1\"> </span><span class=\"mtk12\">list</span><span class=\"mtk1\">.</span><span class=\"mtk11\">find</span><span class=\"mtk1\">(</span><span class=\"mtk12\">findFn</span><span class=\"mtk1\">);</span></span></code></pre>\n<ul>\n<li><code>any</code> vérifie si au moins un des élément d’une collection satisfais un prédicat. Parfois appelé <code>some</code>.</li>\n</ul>\n<pre class=\"default-dark vscode-highlight\" data-language=\"js\"><code class=\"vscode-highlight-code\"><span class=\"vscode-highlight-line\"><span class=\"mtk3\">// (a -&gt; Boolean) -&gt; a[] -&gt; Boolean</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk4\">const</span><span class=\"mtk1\"> </span><span class=\"mtk11\">any</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">anyFn</span><span class=\"mtk1\"> </span><span class=\"mtk4\">=&gt;</span><span class=\"mtk1\"> </span><span class=\"mtk12\">list</span><span class=\"mtk1\"> </span><span class=\"mtk4\">=&gt;</span><span class=\"mtk1\"> </span><span class=\"mtk12\">list</span><span class=\"mtk1\">.</span><span class=\"mtk11\">some</span><span class=\"mtk1\">(</span><span class=\"mtk12\">anyFn</span><span class=\"mtk1\">);</span></span></code></pre>\n<ul>\n<li><code>all</code> vérifie si tous les éléments d’une collection satisfont un prédicat. Parfois appelé <code>every</code>.</li>\n</ul>\n<pre class=\"default-dark vscode-highlight\" data-language=\"js\"><code class=\"vscode-highlight-code\"><span class=\"vscode-highlight-line\"><span class=\"mtk3\">// (a -&gt; Boolean) -&gt; a[] -&gt; Boolean</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk4\">const</span><span class=\"mtk1\"> </span><span class=\"mtk11\">all</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">allFn</span><span class=\"mtk1\"> </span><span class=\"mtk4\">=&gt;</span><span class=\"mtk1\"> </span><span class=\"mtk12\">list</span><span class=\"mtk1\"> </span><span class=\"mtk4\">=&gt;</span><span class=\"mtk1\"> </span><span class=\"mtk12\">list</span><span class=\"mtk1\">.</span><span class=\"mtk11\">every</span><span class=\"mtk1\">(</span><span class=\"mtk12\">allFn</span><span class=\"mtk1\">);</span></span></code></pre>\n<ul>\n<li><code>flatMap</code></li>\n<li><code>reduce</code></li>\n</ul>\n<style class=\"vscode-highlight-styles\">\n  :root {\n  --vscode-highlight-padding-v: 1rem;\n  --vscode-highlight-padding-h: 1.5rem;\n  --vscode-highlight-padding-top: var(--vscode-highlight-padding-v);\n  --vscode-highlight-padding-right: var(--vscode-highlight-padding-h);\n  --vscode-highlight-padding-bottom: var(--vscode-highlight-padding-v);\n  --vscode-highlight-padding-left: var(--vscode-highlight-padding-h);\n  --vscode-highlight-border-radius: 8px;\n\n  --vscode-highlight-line-highlighted-background-color: transparent;\n  --vscode-highlight-line-highlighted-border-width: 4px;\n  --vscode-highlight-line-highlighted-border-color: transparent;\n}\n\n.vscode-highlight {\n  overflow: auto;\n  -webkit-overflow-scrolling: touch;\n  padding-top: 1rem;\n  padding-top: var(--vscode-highlight-padding-top);\n  padding-bottom: 1rem;\n  padding-bottom: var(--vscode-highlight-padding-bottom);\n  border-radius: 8px;\n  border-radius: var(--vscode-highlight-border-radius);\n  font-feature-settings: normal;\n}\n\n.vscode-highlight-code {\n  display: inline-block;\n  min-width: 100%;\n}\n\n.vscode-highlight-line {\n  display: inline-block;\n  box-sizing: border-box;\n  width: 100%;\n  padding-left: 1.5rem;\n  padding-left: var(--vscode-highlight-padding-left);\n  padding-right: 1.5rem;\n  padding-right: var(--vscode-highlight-padding-right);\n}\n\n.vscode-highlight-line-highlighted {\n  background-color: var(--vscode-highlight-line-highlighted-background-color);\n  box-shadow: inset var(--vscode-highlight-line-highlighted-border-width) 0 0 0 var(--vscode-highlight-line-highlighted-border-color);\n}\n\n  .default-dark {\nbackground-color: #1E1E1E;\ncolor: #D4D4D4;\n}\n\n.default-dark .mtk1 { color: #D4D4D4; }\n.default-dark .mtk2 { color: #1E1E1E; }\n.default-dark .mtk3 { color: #6A9955; }\n.default-dark .mtk4 { color: #569CD6; }\n.default-dark .mtk5 { color: #D16969; }\n.default-dark .mtk6 { color: #D7BA7D; }\n.default-dark .mtk7 { color: #B5CEA8; }\n.default-dark .mtk8 { color: #CE9178; }\n.default-dark .mtk9 { color: #646695; }\n.default-dark .mtk10 { color: #4EC9B0; }\n.default-dark .mtk11 { color: #DCDCAA; }\n.default-dark .mtk12 { color: #9CDCFE; }\n.default-dark .mtk13 { color: #000080; }\n.default-dark .mtk14 { color: #F44747; }\n.default-dark .mtk15 { color: #C586C0; }\n.default-dark .mtk16 { color: #6796E6; }\n.default-dark .mtk17 { color: #808080; }\n.default-dark .mtki { font-style: italic; }\n.default-dark .mtkb { font-weight: bold; }\n.default-dark .mtku { text-decoration: underline; text-underline-position: under; }\n</style>","frontmatter":{"title":"Functional Programming — Common functions (Part 1)","date":"2019-10-22T08:00:00+02:00","description":""}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"next":{"fields":{"slug":"/functional-programming/composition/part-1"},"frontmatter":{"title":"Functional Programming — Composition (Part 1)"}},"previous":{"fields":{"slug":"/functional-programming/currying/part-6"},"frontmatter":{"title":"Functional Programming — Currying (Part 6)"}},"slug":"/functional-programming/common-functions/part-1"}}}