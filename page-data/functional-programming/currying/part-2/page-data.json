{"componentChunkName":"component---src-templates-blog-post-tsx","path":"/functional-programming/currying/part-2","result":{"data":{"site":{"siteMetadata":{"title":"known-as-bmf.github.io","author":"Julien Avert"}},"markdownRemark":{"id":"df18f3f2-5ee6-58c6-bd02-7e90424423df","excerpt":"R√©√©crivons les fonctions mult at add diff√©remment pour rendre ce code expressif et moins verbeux. Nous avons transform√© les fonctions pour qu‚Äôelles acceptent‚Ä¶","html":"<p>R√©√©crivons les fonctions <code>mult</code> at <code>add</code> diff√©remment pour rendre ce code expressif et moins verbeux.</p>\n<pre class=\"default-dark vscode-highlight\" data-language=\"js\"><code class=\"vscode-highlight-code\"><span class=\"vscode-highlight-line\"><span class=\"mtk3\">// Number -&gt; Number -&gt; Number</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk4\">const</span><span class=\"mtk1\"> </span><span class=\"mtk11\">mult</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">a</span><span class=\"mtk1\"> </span><span class=\"mtk4\">=&gt;</span><span class=\"mtk1\"> </span><span class=\"mtk12\">b</span><span class=\"mtk1\"> </span><span class=\"mtk4\">=&gt;</span><span class=\"mtk1\"> </span><span class=\"mtk12\">a</span><span class=\"mtk1\"> * </span><span class=\"mtk12\">b</span><span class=\"mtk1\">;</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk3\">// Number -&gt; Number -&gt; Number</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk4\">const</span><span class=\"mtk1\"> </span><span class=\"mtk11\">add</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">a</span><span class=\"mtk1\"> </span><span class=\"mtk4\">=&gt;</span><span class=\"mtk1\"> </span><span class=\"mtk12\">b</span><span class=\"mtk1\"> </span><span class=\"mtk4\">=&gt;</span><span class=\"mtk1\"> </span><span class=\"mtk12\">a</span><span class=\"mtk1\"> + </span><span class=\"mtk12\">b</span><span class=\"mtk1\">;</span></span></code></pre>\n<p>Nous avons transform√© les fonctions pour qu‚Äôelles acceptent leurs param√®tres les uns apr√®s les autres, en retournant des fonctions ‚Äútemporaires‚Äù entre chaque. C‚Äôest ce qu‚Äôon appelle le <strong>currying</strong>.</p>\n<p>Elles sont utilisable ainsi :</p>\n<pre class=\"default-dark vscode-highlight\" data-language=\"js\"><code class=\"vscode-highlight-code\"><span class=\"vscode-highlight-line\"><span class=\"mtk4\">const</span><span class=\"mtk1\"> </span><span class=\"mtk12\">four</span><span class=\"mtk1\"> = </span><span class=\"mtk11\">add</span><span class=\"mtk1\">(</span><span class=\"mtk7\">2</span><span class=\"mtk1\">)(</span><span class=\"mtk7\">2</span><span class=\"mtk1\">);</span></span></code></pre>\n<p>Il est maintenant possible de r√©√©crire <code>plusTen</code>, <code>plusFifty</code>, <code>twoTimes</code> et <code>tenTimes</code> ainsi :</p>\n<pre class=\"default-dark vscode-highlight\" data-language=\"js\"><code class=\"vscode-highlight-code\"><span class=\"vscode-highlight-line\"><span class=\"mtk3\">// Number -&gt; Number</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk4\">const</span><span class=\"mtk1\"> </span><span class=\"mtk12\">plusTen</span><span class=\"mtk1\"> = </span><span class=\"mtk11\">add</span><span class=\"mtk1\">(</span><span class=\"mtk7\">10</span><span class=\"mtk1\">);</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk3\">// Number -&gt; Number</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk4\">const</span><span class=\"mtk1\"> </span><span class=\"mtk12\">plusFifty</span><span class=\"mtk1\"> = </span><span class=\"mtk11\">add</span><span class=\"mtk1\">(</span><span class=\"mtk7\">50</span><span class=\"mtk1\">);</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk3\">// Number -&gt; Number</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk4\">const</span><span class=\"mtk1\"> </span><span class=\"mtk12\">twoTimes</span><span class=\"mtk1\"> = </span><span class=\"mtk11\">mult</span><span class=\"mtk1\">(</span><span class=\"mtk7\">2</span><span class=\"mtk1\">);</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk3\">// Number -&gt; Number</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk4\">const</span><span class=\"mtk1\"> </span><span class=\"mtk12\">tenTimes</span><span class=\"mtk1\"> = </span><span class=\"mtk11\">mult</span><span class=\"mtk1\">(</span><span class=\"mtk7\">10</span><span class=\"mtk1\">);</span></span></code></pre>\n<p>Ici, nous ‚Äúpr√©-remplissons‚Äù la valeur du param√®tre <code>a</code> pour cr√©er une nouvelle fonction qui attends le deuxi√®me param√®tre <code>b</code>. C‚Äôest l‚Äô<strong>application partielle</strong> des param√®tres.</p>\n<p>Nous n‚Äôavons m√™me plus besoin de d√©clarer ces fonctions, nous pouvons directement √©crire :</p>\n<pre class=\"default-dark vscode-highlight\" data-language=\"js\"><code class=\"vscode-highlight-code\"><span class=\"vscode-highlight-line\"><span class=\"mtk4\">const</span><span class=\"mtk1\"> </span><span class=\"mtk12\">result</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">arr</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">  .</span><span class=\"mtk11\">map</span><span class=\"mtk1\">(</span><span class=\"mtk11\">mult</span><span class=\"mtk1\">(</span><span class=\"mtk7\">10</span><span class=\"mtk1\">))</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">  .</span><span class=\"mtk11\">map</span><span class=\"mtk1\">(</span><span class=\"mtk11\">add</span><span class=\"mtk1\">(</span><span class=\"mtk7\">50</span><span class=\"mtk1\">))</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">  .</span><span class=\"mtk11\">map</span><span class=\"mtk1\">(</span><span class=\"mtk11\">mult</span><span class=\"mtk1\">(</span><span class=\"mtk7\">2</span><span class=\"mtk1\">))</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">  .</span><span class=\"mtk11\">map</span><span class=\"mtk1\">(</span><span class=\"mtk11\">add</span><span class=\"mtk1\">(</span><span class=\"mtk7\">10</span><span class=\"mtk1\">));</span></span></code></pre>\n<p>Expressif et concis üòé.</p>\n<style class=\"vscode-highlight-styles\">:root {\n  --vscode-highlight-padding-v: 1rem;\n  --vscode-highlight-padding-h: 1.5rem;\n  --vscode-highlight-padding-top: var(--vscode-highlight-padding-v);\n  --vscode-highlight-padding-right: var(--vscode-highlight-padding-h);\n  --vscode-highlight-padding-bottom: var(--vscode-highlight-padding-v);\n  --vscode-highlight-padding-left: var(--vscode-highlight-padding-h);\n  --vscode-highlight-border-radius: 8px;\n\n  --vscode-highlight-line-highlighted-background-color: transparent;\n  --vscode-highlight-line-highlighted-border-width: 4px;\n  --vscode-highlight-line-highlighted-border-color: transparent;\n}\n\n.vscode-highlight {\n  overflow: auto;\n  -webkit-overflow-scrolling: touch;\n  padding-top: 1rem;\n  padding-top: var(--vscode-highlight-padding-top);\n  padding-bottom: 1rem;\n  padding-bottom: var(--vscode-highlight-padding-bottom);\n  border-radius: 8px;\n  border-radius: var(--vscode-highlight-border-radius);\n  font-feature-settings: normal;\n}\n\n.vscode-highlight-code {\n  display: inline-block;\n  min-width: 100%;\n}\n\n.vscode-highlight-line {\n  display: inline-block;\n  box-sizing: border-box;\n  width: 100%;\n  padding-left: 1.5rem;\n  padding-left: var(--vscode-highlight-padding-left);\n  padding-right: 1.5rem;\n  padding-right: var(--vscode-highlight-padding-right);\n}\n\n.vscode-highlight-line-highlighted {\n  background-color: var(--vscode-highlight-line-highlighted-background-color);\n  box-shadow: inset var(--vscode-highlight-line-highlighted-border-width) 0 0 0 var(--vscode-highlight-line-highlighted-border-color);\n}\n.default-dark {\nbackground-color: #1E1E1E;\ncolor: #D4D4D4;\n}\n\n.default-dark .mtk1 { color: #D4D4D4; }\n.default-dark .mtk2 { color: #1E1E1E; }\n.default-dark .mtk3 { color: #6A9955; }\n.default-dark .mtk4 { color: #569CD6; }\n.default-dark .mtk5 { color: #D16969; }\n.default-dark .mtk6 { color: #D7BA7D; }\n.default-dark .mtk7 { color: #B5CEA8; }\n.default-dark .mtk8 { color: #CE9178; }\n.default-dark .mtk9 { color: #646695; }\n.default-dark .mtk10 { color: #4EC9B0; }\n.default-dark .mtk11 { color: #DCDCAA; }\n.default-dark .mtk12 { color: #9CDCFE; }\n.default-dark .mtk13 { color: #000080; }\n.default-dark .mtk14 { color: #F44747; }\n.default-dark .mtk15 { color: #C586C0; }\n.default-dark .mtk16 { color: #6796E6; }\n.default-dark .mtk17 { color: #808080; }\n.default-dark .mtki { font-style: italic; }\n.default-dark .mtkb { font-weight: bold; }\n.default-dark .mtku { text-decoration: underline; text-underline-position: under; }</style>","frontmatter":{"title":"Functional Programming ‚Äî Currying (Part 2)","date":"2019-10-22T03:00:00+02:00","description":""}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"next":{"fields":{"slug":"/functional-programming/currying/part-3"},"frontmatter":{"title":"Functional Programming ‚Äî Currying (Part 3)"}},"previous":{"fields":{"slug":"/functional-programming/currying/part-1"},"frontmatter":{"title":"Functional Programming ‚Äî Currying (Part 1)"}},"slug":"/functional-programming/currying/part-2"}}}