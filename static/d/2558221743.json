{"data":{"site":{"siteMetadata":{"title":"known-as-bmf.github.io"}},"allMarkdownRemark":{"edges":[{"node":{"excerpt":"Reprenons l’exemple précédent : Il est possible d’utiliser les fonction que nous avons énoncé dans la partie Common functions : De plus, si…","fields":{"slug":"/functional-programming/composition/part-2"},"frontmatter":{"date":"2019-10-22T10:00:00+02:00","title":"Functional Programming — Composition (Part 2)","description":""}}},{"node":{"excerpt":"Ajoutons un outil inestimable à notre arsenal : la composition de fonctions. Commençons par un peu de mathématiques. Il existe un operateur…","fields":{"slug":"/functional-programming/composition/part-1"},"frontmatter":{"date":"2019-10-22T09:00:00+02:00","title":"Functional Programming — Composition (Part 1)","description":""}}},{"node":{"excerpt":"Une des choses très intimidante quand on débute dans la programmation fonctionnelle, c’est le vocabulaire. Beaucoup de termes sembles…","fields":{"slug":"/functional-programming/common-functions/part-1"},"frontmatter":{"date":"2019-10-22T08:00:00+02:00","title":"Functional Programming — Common functions (Part 1)","description":""}}},{"node":{"excerpt":"Avant d’aller plus loin, prenons un peu de temps pour parler de l’ordre des paramètres d’une fonction. Vous l’avez peut-être déjà remarqué…","fields":{"slug":"/functional-programming/currying/part-6"},"frontmatter":{"date":"2019-10-22T07:00:00+02:00","title":"Functional Programming — Currying (Part 6)","description":""}}},{"node":{"excerpt":"Remédions à ça ! Tout d’abord, un peu de vocabulaire : l’arité d’une fonction. L’arité d’une fonction est le nombre de paramètres qu’attends…","fields":{"slug":"/functional-programming/currying/part-5"},"frontmatter":{"date":"2019-10-22T06:00:00+02:00","title":"Functional Programming — Currying (Part 5)","description":""}}},{"node":{"excerpt":"Une implémentation naïve d’un currying plus intelligent pourrait ressembler à : Nous utilisons ici la méthode Function.prototype.bind() pour…","fields":{"slug":"/functional-programming/currying/part-4"},"frontmatter":{"date":"2019-10-22T05:00:00+02:00","title":"Functional Programming — Currying (Part 4)","description":""}}},{"node":{"excerpt":"Le currying vu dans la partie précédente est très puissant mais a quand même quelques inconvénients. Imaginons une fonction ayant trois…","fields":{"slug":"/functional-programming/currying/part-3"},"frontmatter":{"date":"2019-10-22T04:00:00+02:00","title":"Functional Programming — Currying (Part 3)","description":""}}},{"node":{"excerpt":"Réécrivons les fonctions mult at add différemment pour rendre ce code expressif et moins verbeux. Nous avons transformé les fonctions pour…","fields":{"slug":"/functional-programming/currying/part-2"},"frontmatter":{"date":"2019-10-22T03:00:00+02:00","title":"Functional Programming — Currying (Part 2)","description":""}}},{"node":{"excerpt":"Deux autres concepts très importants dans le paradigme fonctionnel sont le currying et l’application partielle. Voici un problème très…","fields":{"slug":"/functional-programming/currying/part-1"},"frontmatter":{"date":"2019-10-22T02:00:00+02:00","title":"Functional Programming — Currying (Part 1)","description":""}}},{"node":{"excerpt":"Vous l’aviez peut-être remarqué, mais cette fonction filterUsers peut en fait être utilisée pour n’importe quel type de collection, puisque…","fields":{"slug":"/functional-programming/high-order-functions/part-5"},"frontmatter":{"date":"2019-10-22T01:00:00+02:00","title":"Functional Programming — High-Order Functions (Part 5)","description":""}}},{"node":{"excerpt":"Utilisons la magie des fonctions d’ordre supérieur ! Essayons d’extraire la condition de la partie précédente dans une fonction : On appelle…","fields":{"slug":"/functional-programming/high-order-functions/part-4"},"frontmatter":{"date":"2019-10-22T00:00:00+02:00","title":"Functional Programming — High-Order Functions (Part 4)","description":""}}},{"node":{"excerpt":"Vous l’attendiez, la demande d’évolution est arrivée ! Le nouveau besoin est de pouvoir aussi filtrer la liste d’utilisateurs pour trouver…","fields":{"slug":"/functional-programming/high-order-functions/part-3"},"frontmatter":{"date":"2019-10-21T23:00:00+02:00","title":"Functional Programming — High-Order Functions (Part 3)","description":""}}},{"node":{"excerpt":"Pour illustrer l’intérêt des fonctions d’ordre supérieur, essayons de résoudre un problème classique de manipulation de collection. Prenons…","fields":{"slug":"/functional-programming/high-order-functions/part-2"},"frontmatter":{"date":"2019-10-21T22:00:00+02:00","title":"Functional Programming — High-Order Functions (Part 2)","description":""}}},{"node":{"excerpt":"Dans le paradigme fonctionnel, les fonctions sont des objets de première classe. Cela signifie qu’elles peuvent être : Construites à la…","fields":{"slug":"/functional-programming/high-order-functions/part-1"},"frontmatter":{"date":"2019-10-21T21:00:00+02:00","title":"Functional Programming — High-Order Functions (Part 1)","description":""}}},{"node":{"excerpt":"Bienvenue dans cette introduction à la programmation fonctionnelle ! Avant de commencer, voici quelques pré-requis afin de tout comprendre…","fields":{"slug":"/functional-programming/intro"},"frontmatter":{"date":"2019-10-21T20:00:00+02:00","title":"Functional Programming — Introduction","description":""}}},{"node":{"excerpt":"Il existe trois mots clés de déclaration de variable en ES6: const, let et var. Il est aussi possible de déclarer une variable sans mot clé…","fields":{"slug":"/es6/declarations"},"frontmatter":{"date":"2019-10-21T19:00:00+02:00","title":"ES6 — Déclarations","description":""}}}]}}}