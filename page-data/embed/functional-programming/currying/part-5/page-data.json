{"componentChunkName":"component---src-templates-embed-post-tsx","path":"/embed/functional-programming/currying/part-5","result":{"data":{"markdownRemark":{"id":"4d4d3ecf-da7f-56a2-89ff-67137bec8e5e","html":"<p>Remédions à ça !</p>\n<p>Tout d’abord, un peu de vocabulaire : l’<strong><a href=\"https://fr.wikipedia.org/wiki/Arit%C3%A9\">arité</a></strong> d’une fonction. L’arité d’une fonction est le nombre de paramètres qu’attends une fonction.</p>\n<p>En JavaScript, il est possible de trouver l’arité d’une fonction en appelant la propriété <code>length</code> de cette fonction.</p>\n<pre class=\"default-dark vscode-highlight\" data-language=\"js\"><code class=\"vscode-highlight-code\"><span class=\"vscode-highlight-line\"><span class=\"mtk3\">// (Number, Number) -&gt; Number</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk4\">const</span><span class=\"mtk1\"> </span><span class=\"mtk11\">add</span><span class=\"mtk1\"> = (</span><span class=\"mtk12\">a</span><span class=\"mtk1\">, </span><span class=\"mtk12\">b</span><span class=\"mtk1\">) </span><span class=\"mtk4\">=&gt;</span><span class=\"mtk1\"> </span><span class=\"mtk12\">a</span><span class=\"mtk1\"> + </span><span class=\"mtk12\">b</span><span class=\"mtk1\">;</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\"></span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk4\">const</span><span class=\"mtk1\"> </span><span class=\"mtk12\">arity</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">add</span><span class=\"mtk1\">.</span><span class=\"mtk12\">length</span><span class=\"mtk1\">;</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk3\">// arity = 2</span></span></code></pre>\n<p>Néanmoins, les paramètres optionnels d’une fonction ne rentrerons pas dans le calcul de l’arité.</p>\n<pre class=\"default-dark vscode-highlight\" data-language=\"js\"><code class=\"vscode-highlight-code\"><span class=\"vscode-highlight-line\"><span class=\"mtk3\">// (Number, Number, Number?) -&gt; Number</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk4\">const</span><span class=\"mtk1\"> </span><span class=\"mtk11\">add</span><span class=\"mtk1\"> = (</span><span class=\"mtk12\">a</span><span class=\"mtk1\">, </span><span class=\"mtk12\">b</span><span class=\"mtk1\">, </span><span class=\"mtk12\">c</span><span class=\"mtk1\"> = </span><span class=\"mtk7\">0</span><span class=\"mtk1\">) </span><span class=\"mtk4\">=&gt;</span><span class=\"mtk1\"> </span><span class=\"mtk12\">a</span><span class=\"mtk1\"> + </span><span class=\"mtk12\">b</span><span class=\"mtk1\"> + </span><span class=\"mtk12\">c</span><span class=\"mtk1\">;</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\"></span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk4\">const</span><span class=\"mtk1\"> </span><span class=\"mtk12\">arity</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">add</span><span class=\"mtk1\">.</span><span class=\"mtk12\">length</span><span class=\"mtk1\">;</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk3\">// arity = 2</span></span></code></pre>\n<p>Pour une curryfication correcte, il est nécessaire de connaitre le nombre d’arguments d’une fonction pour savoir lorsqu’elle peut être appelée.</p>\n<p>Et maintenant, le saint Graal du currying :</p>\n<pre class=\"default-dark vscode-highlight\" data-language=\"js\"><code class=\"vscode-highlight-code\"><span class=\"vscode-highlight-line\"><span class=\"mtk4\">const</span><span class=\"mtk1\"> </span><span class=\"mtk11\">curry</span><span class=\"mtk1\"> = (</span><span class=\"mtk12\">fn</span><span class=\"mtk1\">, </span><span class=\"mtk12\">arity</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">fn</span><span class=\"mtk1\">.</span><span class=\"mtk12\">length</span><span class=\"mtk1\">, ...</span><span class=\"mtk12\">args</span><span class=\"mtk1\">) </span><span class=\"mtk4\">=&gt;</span><span class=\"mtk1\"> {</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">  </span><span class=\"mtk15\">if</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">arity</span><span class=\"mtk1\"> &lt;= </span><span class=\"mtk12\">args</span><span class=\"mtk1\">.</span><span class=\"mtk12\">length</span><span class=\"mtk1\">) {</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">    </span><span class=\"mtk15\">return</span><span class=\"mtk1\"> </span><span class=\"mtk11\">fn</span><span class=\"mtk1\">(...</span><span class=\"mtk12\">args</span><span class=\"mtk1\">);</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">  }</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">  </span><span class=\"mtk15\">return</span><span class=\"mtk1\"> </span><span class=\"mtk12\">curry</span><span class=\"mtk1\">.</span><span class=\"mtk11\">bind</span><span class=\"mtk1\">(</span><span class=\"mtk4\">null</span><span class=\"mtk1\">, </span><span class=\"mtk12\">fn</span><span class=\"mtk1\">, </span><span class=\"mtk12\">arity</span><span class=\"mtk1\">, ...</span><span class=\"mtk12\">args</span><span class=\"mtk1\">);</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\">};</span></span></code></pre>\n<p>C’est une fonction d’ordre supérieur qui prends une fonction et en retourne une version curriée. Quelques explications sur ce code qui peut paraître compliqué :</p>\n<ul>\n<li>\n<p>les arguments :</p>\n<ul>\n<li><code>fn</code> la fonction à currier</li>\n<li><code>arity</code> l’arité de la fonction. Il n’est pas requis et a comme valeur par défaut <code>fn.length</code>.</li>\n<li><code>...args</code> une liste d’arguments à passer a <code>fn</code></li>\n</ul>\n</li>\n<li>\n<p>le corps :</p>\n<ul>\n<li>si les arguments passés dans <code>...args</code> sont assez nombreux pour satisfaire l’arité voulue, on appelle <code>fn</code></li>\n<li>sinon, on refais l’appel a curry, mais cette fois ci en pré-remplissant <code>...args</code> avec les arguments donnés</li>\n</ul>\n</li>\n</ul>\n<style class=\"vscode-highlight-styles\">:root {\n  --vscode-highlight-padding-v: 1rem;\n  --vscode-highlight-padding-h: 1.5rem;\n  --vscode-highlight-padding-top: var(--vscode-highlight-padding-v);\n  --vscode-highlight-padding-right: var(--vscode-highlight-padding-h);\n  --vscode-highlight-padding-bottom: var(--vscode-highlight-padding-v);\n  --vscode-highlight-padding-left: var(--vscode-highlight-padding-h);\n  --vscode-highlight-border-radius: 8px;\n\n  --vscode-highlight-line-highlighted-background-color: transparent;\n  --vscode-highlight-line-highlighted-border-width: 4px;\n  --vscode-highlight-line-highlighted-border-color: transparent;\n}\n\n.vscode-highlight {\n  overflow: auto;\n  -webkit-overflow-scrolling: touch;\n  padding-top: 1rem;\n  padding-top: var(--vscode-highlight-padding-top);\n  padding-bottom: 1rem;\n  padding-bottom: var(--vscode-highlight-padding-bottom);\n  border-radius: 8px;\n  border-radius: var(--vscode-highlight-border-radius);\n  font-feature-settings: normal;\n}\n\n.vscode-highlight-code {\n  display: inline-block;\n  min-width: 100%;\n}\n\n.vscode-highlight-line {\n  display: inline-block;\n  box-sizing: border-box;\n  width: 100%;\n  padding-left: 1.5rem;\n  padding-left: var(--vscode-highlight-padding-left);\n  padding-right: 1.5rem;\n  padding-right: var(--vscode-highlight-padding-right);\n}\n\n.vscode-highlight-line-highlighted {\n  background-color: var(--vscode-highlight-line-highlighted-background-color);\n  box-shadow: inset var(--vscode-highlight-line-highlighted-border-width) 0 0 0 var(--vscode-highlight-line-highlighted-border-color);\n}\n.default-dark {\nbackground-color: #1E1E1E;\ncolor: #D4D4D4;\n}\n\n.default-dark .mtk1 { color: #D4D4D4; }\n.default-dark .mtk2 { color: #1E1E1E; }\n.default-dark .mtk3 { color: #6A9955; }\n.default-dark .mtk4 { color: #569CD6; }\n.default-dark .mtk5 { color: #D16969; }\n.default-dark .mtk6 { color: #D7BA7D; }\n.default-dark .mtk7 { color: #B5CEA8; }\n.default-dark .mtk8 { color: #CE9178; }\n.default-dark .mtk9 { color: #646695; }\n.default-dark .mtk10 { color: #4EC9B0; }\n.default-dark .mtk11 { color: #DCDCAA; }\n.default-dark .mtk12 { color: #9CDCFE; }\n.default-dark .mtk13 { color: #000080; }\n.default-dark .mtk14 { color: #F44747; }\n.default-dark .mtk15 { color: #C586C0; }\n.default-dark .mtk16 { color: #6796E6; }\n.default-dark .mtk17 { color: #808080; }\n.default-dark .mtki { font-style: italic; }\n.default-dark .mtkb { font-weight: bold; }\n.default-dark .mtku { text-decoration: underline; text-underline-position: under; }</style>","frontmatter":{"title":"Functional Programming — Currying (Part 5)"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/functional-programming/currying/part-5"}}}