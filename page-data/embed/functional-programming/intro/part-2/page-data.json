{"componentChunkName":"component---src-templates-embed-post-tsx","path":"/embed/functional-programming/intro/part-2","result":{"data":{"markdownRemark":{"id":"cba37c8b-fe61-59fd-8449-8fa278e8938e","html":"<p>Il y a quelques concepts indispensables à connaitre avant de commencer.</p>\n<h2>Immutabilité</h2>\n<p>Une valeur immuable est une valeur qui change pas de valeur après sa définition. Pour faire muter cette valeur, il faut d’abord en faire une copie.</p>\n<p>L’intérêt est d’éviter les effets de bords lorsqu’une valeur est utilisée dans différent traitements et de garder tous les états d’une valeurs dans le temps pour pouvoir rejouer des traitements ou revenir à un état précédent.</p>\n<p>Quelques moyens d’adopter ce comportement en JavaScript :</p>\n<ul>\n<li>\n<p>Utiliser <code>const</code> pour repérer les réassignations grâce à un transpileur / éditeur.</p>\n<ul>\n<li>marche très bien avec les types primitifs mais n’empêche pas le contenu des objets complexes d’être réassigné</li>\n</ul>\n</li>\n<li>\n<p>Lors de manipulation d’objets ou de collections</p>\n<ul>\n<li>faire une <a href=\"https://fr.wikipedia.org/wiki/Copie_d%27un_objet#Copie_superficielle\"><strong>copie superficielle</strong></a> (<em>shallow copies</em>) par <a href=\"https://developer.mozilla.org/fr/docs/Web/JavaScript/Reference/Op%C3%A9rateurs/Syntaxe_d%C3%A9composition\">décomposition</a> (<em>spreading</em>)</li>\n<li>utiliser <a href=\"https://developer.mozilla.org/fr/docs/Web/JavaScript/Reference/Objets_globaux/Object/freeze\"><code>Object.freeze</code></a>. Attention, cette technique, comme la décomposition, ne gèle que <strong>superficiellement</strong>.</li>\n<li>Faire une copie profonde (<em>deep copy</em>). très efficace mais peut consommer beaucoup des ressources en fonction de la taille de l’objet.</li>\n</ul>\n</li>\n</ul>\n<p>Ce sont les techniques <em>superficielles</em> qui sont le plus souvent utilisées, il faut néanmoins être très vigilant avec.</p>\n<pre class=\"default-dark vscode-highlight\" data-language=\"js\"><code class=\"vscode-highlight-code\"><span class=\"vscode-highlight-line\"><span class=\"mtk4\">const</span><span class=\"mtk1\"> </span><span class=\"mtk12\">user</span><span class=\"mtk1\"> = { </span><span class=\"mtk12\">tri:</span><span class=\"mtk1\"> </span><span class=\"mtk8\">&#39;JAV&#39;</span><span class=\"mtk1\">, </span><span class=\"mtk12\">address:</span><span class=\"mtk1\"> { </span><span class=\"mtk12\">street:</span><span class=\"mtk1\"> </span><span class=\"mtk8\">&#39;rue du moulin&#39;</span><span class=\"mtk1\"> } };</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk4\">const</span><span class=\"mtk1\"> </span><span class=\"mtk12\">userCopy</span><span class=\"mtk1\"> = { ...</span><span class=\"mtk12\">user</span><span class=\"mtk1\">, </span><span class=\"mtk12\">tri:</span><span class=\"mtk1\"> </span><span class=\"mtk8\">&#39;FOO&#39;</span><span class=\"mtk1\"> };</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk3\">// userCopy = { tri: &#39;FOO&#39;, address: { street: &#39;rue du moulin&#39; }}</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk3\">// ici, les propriétés address de user et userCopy pointent toujours</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk3\">// vers le même objet en mémoire</span></span></code></pre>\n<h2>Pureté / Idempotence</h2>\n<p>Une fonction pure est une fonction qui remplis les critères suivants :</p>\n<ul>\n<li>\n<p>Pour les mêmes valeurs d’entrée, elle retournera toujours le même résultat</p>\n<ul>\n<li>pas de dépendance a des variables globales ou non locales</li>\n</ul>\n</li>\n<li>\n<p>Elle n’a pas d’effets de bords</p>\n<ul>\n<li>pas d’appels base de donnée</li>\n<li>pas de mutation de variables globales / non locales</li>\n</ul>\n</li>\n</ul>\n<p>La pureté apporte plusieurs bénéfices :</p>\n<ul>\n<li>Reproductibilité</li>\n<li>Très facile a tester unitairement</li>\n<li>Encourage un découpage en petites unités de traitement</li>\n</ul>\n<style class=\"vscode-highlight-styles\">\n  :root {\n  --vscode-highlight-padding-v: 1rem;\n  --vscode-highlight-padding-h: 1.5rem;\n  --vscode-highlight-padding-top: var(--vscode-highlight-padding-v);\n  --vscode-highlight-padding-right: var(--vscode-highlight-padding-h);\n  --vscode-highlight-padding-bottom: var(--vscode-highlight-padding-v);\n  --vscode-highlight-padding-left: var(--vscode-highlight-padding-h);\n  --vscode-highlight-border-radius: 8px;\n\n  --vscode-highlight-line-highlighted-background-color: transparent;\n  --vscode-highlight-line-highlighted-border-width: 4px;\n  --vscode-highlight-line-highlighted-border-color: transparent;\n}\n\n.vscode-highlight {\n  overflow: auto;\n  -webkit-overflow-scrolling: touch;\n  padding-top: 1rem;\n  padding-top: var(--vscode-highlight-padding-top);\n  padding-bottom: 1rem;\n  padding-bottom: var(--vscode-highlight-padding-bottom);\n  border-radius: 8px;\n  border-radius: var(--vscode-highlight-border-radius);\n  font-feature-settings: normal;\n}\n\n.vscode-highlight-code {\n  display: inline-block;\n  min-width: 100%;\n}\n\n.vscode-highlight-line {\n  display: inline-block;\n  box-sizing: border-box;\n  width: 100%;\n  padding-left: 1.5rem;\n  padding-left: var(--vscode-highlight-padding-left);\n  padding-right: 1.5rem;\n  padding-right: var(--vscode-highlight-padding-right);\n}\n\n.vscode-highlight-line-highlighted {\n  background-color: var(--vscode-highlight-line-highlighted-background-color);\n  box-shadow: inset var(--vscode-highlight-line-highlighted-border-width) 0 0 0 var(--vscode-highlight-line-highlighted-border-color);\n}\n\n  .default-dark {\nbackground-color: #1E1E1E;\ncolor: #D4D4D4;\n}\n\n.default-dark .mtk1 { color: #D4D4D4; }\n.default-dark .mtk2 { color: #1E1E1E; }\n.default-dark .mtk3 { color: #6A9955; }\n.default-dark .mtk4 { color: #569CD6; }\n.default-dark .mtk5 { color: #D16969; }\n.default-dark .mtk6 { color: #D7BA7D; }\n.default-dark .mtk7 { color: #B5CEA8; }\n.default-dark .mtk8 { color: #CE9178; }\n.default-dark .mtk9 { color: #646695; }\n.default-dark .mtk10 { color: #4EC9B0; }\n.default-dark .mtk11 { color: #DCDCAA; }\n.default-dark .mtk12 { color: #9CDCFE; }\n.default-dark .mtk13 { color: #000080; }\n.default-dark .mtk14 { color: #F44747; }\n.default-dark .mtk15 { color: #C586C0; }\n.default-dark .mtk16 { color: #6796E6; }\n.default-dark .mtk17 { color: #808080; }\n.default-dark .mtki { font-style: italic; }\n.default-dark .mtkb { font-weight: bold; }\n.default-dark .mtku { text-decoration: underline; text-underline-position: under; }\n</style>","frontmatter":{"title":"Functional Programming — Introduction (Part 2)"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/functional-programming/intro/part-2"}}}