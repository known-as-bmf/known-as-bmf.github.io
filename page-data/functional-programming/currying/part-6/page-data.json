{"componentChunkName":"component---src-templates-blog-post-tsx","path":"/functional-programming/currying/part-6","result":{"data":{"site":{"siteMetadata":{"title":"known-as-bmf.github.io","author":"Julien Avert"}},"markdownRemark":{"id":"eee11f24-53ab-59db-a555-a0ca7e93332f","excerpt":"Avant d’aller plus loin, prenons un peu de temps pour parler de l’ordre des paramètres d’une fonction. Vous l’avez peut-être déjà remarqué par vous même, l…","html":"<p>Avant d’aller plus loin, prenons un peu de temps pour parler de l’<strong>ordre des paramètres</strong> d’une fonction. Vous l’avez peut-être déjà remarqué par vous même, l’ordre des paramètres d’une fonction curriée est <strong>très</strong> important.</p>\n<p>Prenons par exemple ces deux fonctions qui font exactement la même chose :</p>\n<pre class=\"default-dark vscode-highlight\" data-language=\"js\"><code class=\"vscode-highlight-code\"><span class=\"vscode-highlight-line\"><span class=\"mtk3\">// (a[], a -&gt; b) -&gt; b[]</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk4\">const</span><span class=\"mtk1\"> </span><span class=\"mtk11\">map1</span><span class=\"mtk1\"> = (</span><span class=\"mtk12\">list</span><span class=\"mtk1\">, </span><span class=\"mtk12\">mapFn</span><span class=\"mtk1\">) </span><span class=\"mtk4\">=&gt;</span><span class=\"mtk1\"> </span><span class=\"mtk12\">list</span><span class=\"mtk1\">.</span><span class=\"mtk11\">map</span><span class=\"mtk1\">(</span><span class=\"mtk12\">mapFn</span><span class=\"mtk1\">);</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\"></span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk3\">// (a -&gt; b, a[]) -&gt; b[]</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk4\">const</span><span class=\"mtk1\"> </span><span class=\"mtk11\">map2</span><span class=\"mtk1\"> = (</span><span class=\"mtk12\">mapFn</span><span class=\"mtk1\">, </span><span class=\"mtk12\">list</span><span class=\"mtk1\">) </span><span class=\"mtk4\">=&gt;</span><span class=\"mtk1\"> </span><span class=\"mtk12\">list</span><span class=\"mtk1\">.</span><span class=\"mtk11\">map</span><span class=\"mtk1\">(</span><span class=\"mtk12\">mapFn</span><span class=\"mtk1\">);</span></span></code></pre>\n<p>La seule différence est l’ordre de ses paramètres. Maintenant, curryfions les :</p>\n<pre class=\"default-dark vscode-highlight\" data-language=\"js\"><code class=\"vscode-highlight-code\"><span class=\"vscode-highlight-line\"><span class=\"mtk3\">// a[] -&gt; (a -&gt; b) -&gt; b[]</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk4\">const</span><span class=\"mtk1\"> </span><span class=\"mtk12\">curriedMap1</span><span class=\"mtk1\"> = </span><span class=\"mtk11\">curry</span><span class=\"mtk1\">(</span><span class=\"mtk12\">map1</span><span class=\"mtk1\">);</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk1\"></span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk3\">// (a -&gt; b) -&gt; a[] -&gt; b[]</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk4\">const</span><span class=\"mtk1\"> </span><span class=\"mtk12\">curriedMap2</span><span class=\"mtk1\"> = </span><span class=\"mtk11\">curry</span><span class=\"mtk1\">(</span><span class=\"mtk12\">map2</span><span class=\"mtk1\">);</span></span></code></pre>\n<p>Vous pouvez voir ici que le premier paramètre “pré-remplissable” change en fonction de la signature de base, ce qui impacte énormément l’utilité et l’utilisation de la version curriée.</p>\n<p>Ici, la première version a une utilité très limitée, car elle permet d’appliquer plusieurs transformations sur la même liste alors que la seconde version permet d’appliquer une transformation donnée sur plusieurs listes.</p>\n<pre class=\"default-dark vscode-highlight\" data-language=\"js\"><code class=\"vscode-highlight-code\"><span class=\"vscode-highlight-line\"><span class=\"mtk3\">// Number[] -&gt; Number[]</span></span>\n<span class=\"vscode-highlight-line\"><span class=\"mtk4\">const</span><span class=\"mtk1\"> </span><span class=\"mtk12\">divideByTwo</span><span class=\"mtk1\"> = </span><span class=\"mtk11\">curriedMap2</span><span class=\"mtk1\">(</span><span class=\"mtk12\">i</span><span class=\"mtk1\"> </span><span class=\"mtk4\">=&gt;</span><span class=\"mtk1\"> </span><span class=\"mtk12\">i</span><span class=\"mtk1\"> / </span><span class=\"mtk7\">2</span><span class=\"mtk1\">);</span></span></code></pre>\n<p>La règle générale est de mettre la valeur à transformer / manipuler en dernier dans la liste de paramètres.</p>\n<style class=\"vscode-highlight-styles\">\n  :root {\n  --vscode-highlight-padding-v: 1rem;\n  --vscode-highlight-padding-h: 1.5rem;\n  --vscode-highlight-padding-top: var(--vscode-highlight-padding-v);\n  --vscode-highlight-padding-right: var(--vscode-highlight-padding-h);\n  --vscode-highlight-padding-bottom: var(--vscode-highlight-padding-v);\n  --vscode-highlight-padding-left: var(--vscode-highlight-padding-h);\n  --vscode-highlight-border-radius: 8px;\n\n  --vscode-highlight-line-highlighted-background-color: transparent;\n  --vscode-highlight-line-highlighted-border-width: 4px;\n  --vscode-highlight-line-highlighted-border-color: transparent;\n}\n\n.vscode-highlight {\n  overflow: auto;\n  -webkit-overflow-scrolling: touch;\n  padding-top: 1rem;\n  padding-top: var(--vscode-highlight-padding-top);\n  padding-bottom: 1rem;\n  padding-bottom: var(--vscode-highlight-padding-bottom);\n  border-radius: 8px;\n  border-radius: var(--vscode-highlight-border-radius);\n  font-feature-settings: normal;\n}\n\n.vscode-highlight-code {\n  display: inline-block;\n  min-width: 100%;\n}\n\n.vscode-highlight-line {\n  display: inline-block;\n  box-sizing: border-box;\n  width: 100%;\n  padding-left: 1.5rem;\n  padding-left: var(--vscode-highlight-padding-left);\n  padding-right: 1.5rem;\n  padding-right: var(--vscode-highlight-padding-right);\n}\n\n.vscode-highlight-line-highlighted {\n  background-color: var(--vscode-highlight-line-highlighted-background-color);\n  box-shadow: inset var(--vscode-highlight-line-highlighted-border-width) 0 0 0 var(--vscode-highlight-line-highlighted-border-color);\n}\n\n  .default-dark {\nbackground-color: #1E1E1E;\ncolor: #D4D4D4;\n}\n\n.default-dark .mtk1 { color: #D4D4D4; }\n.default-dark .mtk2 { color: #1E1E1E; }\n.default-dark .mtk3 { color: #6A9955; }\n.default-dark .mtk4 { color: #569CD6; }\n.default-dark .mtk5 { color: #D16969; }\n.default-dark .mtk6 { color: #D7BA7D; }\n.default-dark .mtk7 { color: #B5CEA8; }\n.default-dark .mtk8 { color: #CE9178; }\n.default-dark .mtk9 { color: #646695; }\n.default-dark .mtk10 { color: #4EC9B0; }\n.default-dark .mtk11 { color: #DCDCAA; }\n.default-dark .mtk12 { color: #9CDCFE; }\n.default-dark .mtk13 { color: #000080; }\n.default-dark .mtk14 { color: #F44747; }\n.default-dark .mtk15 { color: #C586C0; }\n.default-dark .mtk16 { color: #6796E6; }\n.default-dark .mtk17 { color: #808080; }\n.default-dark .mtki { font-style: italic; }\n.default-dark .mtkb { font-weight: bold; }\n.default-dark .mtku { text-decoration: underline; text-underline-position: under; }\n</style>","frontmatter":{"title":"Functional Programming — Currying (Part 6)","date":"2019-10-22T07:00:00+02:00","description":""}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"next":{"fields":{"slug":"/functional-programming/common-functions/part-1"},"frontmatter":{"title":"Functional Programming — Common functions (Part 1)"}},"previous":{"fields":{"slug":"/functional-programming/currying/part-5"},"frontmatter":{"title":"Functional Programming — Currying (Part 5)"}},"slug":"/functional-programming/currying/part-6"}}}